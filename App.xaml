<Application x:Class="Beam.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="BeamWindow.xaml">
    <Application.Resources>
        
        <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <TextBox Text="{Binding Path=Text,
                                                RelativeSource={RelativeSource TemplatedParent}, 
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
                                 x:Name="textSource" 
                                 Background="Transparent" 
                                 TextWrapping="Wrap"    
                                 HorizontalContentAlignment="Center"
                                 VerticalContentAlignment="Center"
                                 Panel.ZIndex="2" />
                            <TextBox Text="{TemplateBinding Tag}" Background="{TemplateBinding Background}" Panel.ZIndex="1">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}">
                                        <Setter Property="Foreground" Value="Transparent"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                                <Setter Property="Foreground" Value="Gray"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
             </Setter>
        </Style>
        <Style x:Key="MetroWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="WindowStyle" Value="None"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Grid>
                            <Border x:Name="MainBorder" BorderThickness="0" Background="White" >
                                <DockPanel LastChildFill="True">
                                    <Border x:Name="PART_TITLEBAR" 
                                        Margin="0,0,0,0" Height="40" DockPanel.Dock="Top"  
                                        Background="Transparent" MouseLeftButtonDown="PART_TITLEBAR_MouseLeftButtonDown">
                                        <DockPanel LastChildFill="False">
                                            <TextBlock Margin="4,0,0,4" VerticalAlignment="Center" 
                                                    Foreground="#FFAAAAAA" TextWrapping="NoWrap" 
                                                    Text="{TemplateBinding Title}" FontSize="16" />
                                            <Button x:Name="PART_CLOSE" DockPanel.Dock="Right" 
                                                VerticalAlignment="Center" Margin="5"
                                                Height="20" Width="20" 
                                                Style="{DynamicResource MetroWindowButtonStyle}"
                                                Click="PART_CLOSE_Click">
                                                <Path Data="F1M54.0573,47.8776L38.1771,31.9974 54.0547,16.1198C55.7604,14.4141 55.7604,11.6511 54.0573,9.94531 52.3516,8.23962 49.5859,8.23962 47.8802,9.94531L32.0026,25.8229 16.1224,9.94531C14.4167,8.23962 11.6511,8.23962 9.94794,9.94531 8.24219,11.6511 8.24219,14.4141 9.94794,16.1198L25.8255,32 9.94794,47.8776C8.24219,49.5834 8.24219,52.3477 9.94794,54.0534 11.6511,55.7572 14.4167,55.7585 16.1224,54.0534L32.0026,38.1745 47.8802,54.0534C49.5859,55.7585 52.3516,55.7572 54.0573,54.0534 55.7604,52.3477 55.763,49.5834 54.0573,47.8776z" 
                                                    Stretch="Uniform" Fill="#FFAAAAAA" Width="10" Margin="0,0,0,0" ></Path>
                                            </Button>
                                            <Button x:Name="PART_MAXIMIZE_RESTORE" 
                                                DockPanel.Dock="Right" Margin="5"
                                                HorizontalAlignment="Center" VerticalAlignment="Center" 
                                                Height="20" Width="20" Style="{DynamicResource MetroWindowButtonStyle}"
                                                Click="PART_MAXIMIZE_RESTORE_Click">
                                                <Path Data="M4.3685131,23.127279L4.3685131,47.283243 47.117023,47.283243 47.117023,23.127279z M0,10.684L53.755001,10.684 53.755001,51.668001 0,51.668001z M8.5679998,0L58.668022,0 64,0 64,5.6864691 64,45.317999 58.668022,45.317999 58.668022,5.6864691 8.5679998,5.6864691z"
                                                    Stretch="Uniform" Fill="#FFAAAAAA" Width="10" Margin="0,0,0,0" ></Path>
                                            </Button>
                                            <Button x:Name="PART_MINIMIZE" 
                                                HorizontalAlignment="Center" 
                                                VerticalAlignment="Center" Margin="5"
                                                DockPanel.Dock="Right"
                                                Height="20" Width="20" Style="{DynamicResource MetroWindowButtonStyle}"
                                                Click="PART_MINIMIZE_Click" VerticalContentAlignment="Bottom">
                                                <Button.Content>
                                                    <Path Data="M0,20L53.333,20 53.333,8.888 0,8.888z" 
                                                        Stretch="Uniform" Fill="#FFAAAAAA" Width="10" Margin="0,0,0,5"></Path>
                                                </Button.Content>
                                            </Button>
                                        </DockPanel>
                                    </Border>

                                    <AdornerDecorator DockPanel.Dock="Bottom">
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                    </AdornerDecorator>
                                </DockPanel>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Window}">
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                    <Grid>
                                        <AdornerDecorator>
                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                                        </AdornerDecorator>
                                        <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="False" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                            <Condition Property="WindowState" Value="Normal"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="MetroWindowButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="BorderBrush" Value="#FF707070"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Hover Brushes -->
        <LinearGradientBrush x:Key="HoverBackgroundBrushKey"
                        StartPoint="0,0"
                        EndPoint="0,1">
            <GradientStop Color="#FCFCFC"
                    Offset="0" />
            <GradientStop Color="#EBF3FD"
                    Offset="1" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="HoverOuterBorderBrushKey"
                    Color="#B8D6FB" />
        <SolidColorBrush x:Key="HoverInnerBorderBrushKey"
                    Color="#F2F7FE" />

        <!-- Selected (Active) Brushes -->
        <LinearGradientBrush x:Key="SelectedActiveBackgroundBrushKey"
                        StartPoint="0,0"
                        EndPoint="0,1">
            <GradientStop Color="#DCEBFC"
                    Offset="0" />
            <GradientStop Color="#C1DBFC"
                    Offset="1" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="SelectedActiveOuterBorderBrushKey"
                    Color="#7DA2CE" />
        <SolidColorBrush x:Key="SelectedActiveInnerBorderBrushKey"
                    Color="#EBF4FD" />

        <!-- Selected (Inactive) Brushes -->
        <LinearGradientBrush x:Key="SelectedInactiveBackgroundBrushKey"
                        StartPoint="0,0"
                        EndPoint="0,1">
            <GradientStop Color="#F8F8F8"
                    Offset="0" />
            <GradientStop Color="#E5E5E5"
                    Offset="1" />
        </LinearGradientBrush>
        <SolidColorBrush x:Key="SelectedInactiveOuterBorderBrushKey"
                    Color="#D9D9D9" />
        <SolidColorBrush x:Key="SelectedInactiveInnerBorderBrushKey"
                    Color="#F0F0F0" />

        <!-- ListBoxItem Style -->
        <Style x:Key="{x:Type ListBoxItem}"
        TargetType="{x:Type ListBoxItem}">
            <Setter Property="BorderThickness"
            Value="1" />
            <Setter Property="Padding"
            Value="2,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Grid>
                            <Border x:Name="outerBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2"
                            SnapsToDevicePixels="true">
                                <Border x:Name="innerBorder"
                                Background="{TemplateBinding Background}"
                                BorderThickness="1"
                                CornerRadius="1"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Border>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                                Value="true">
                                <Setter TargetName="outerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource HoverOuterBorderBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="Background"
                                Value="{StaticResource HoverBackgroundBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource HoverInnerBorderBrushKey}" />
                            </Trigger>
                            <Trigger Property="IsSelected"
                                Value="true">
                                <Setter TargetName="outerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource SelectedActiveOuterBorderBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="Background"
                                Value="{StaticResource SelectedActiveBackgroundBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource SelectedActiveInnerBorderBrushKey}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected"
                                        Value="true" />
                                    <Condition Property="Selector.IsSelectionActive"
                                        Value="false" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="outerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource SelectedInactiveOuterBorderBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="Background"
                                Value="{StaticResource SelectedInactiveBackgroundBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource SelectedInactiveInnerBorderBrushKey}" />
                            </MultiTrigger>
                            <Trigger Property="IsEnabled"
                                Value="false">
                                <Setter Property="Foreground"
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- ListViewItem Style -->
        <Style x:Key="{x:Type ListViewItem}"
        TargetType="{x:Type ListViewItem}"
        BasedOn="{StaticResource {x:Type ListBoxItem}}" />

        <!-- Supporting TreeViewItem Resources -->
        <PathGeometry x:Key="TreeArrow">
            <PathGeometry.Figures>
                <PathFigureCollection>
                    <PathFigure IsFilled="True"
                        StartPoint="0 0"
                        IsClosed="True">
                        <PathFigure.Segments>
                            <PathSegmentCollection>
                                <LineSegment Point="0 6" />
                                <LineSegment Point="6 0" />
                            </PathSegmentCollection>
                        </PathFigure.Segments>
                    </PathFigure>
                </PathFigureCollection>
            </PathGeometry.Figures>
        </PathGeometry>
        <Style x:Key="ExpandCollapseToggleStyle"
        TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable"
            Value="False" />
            <Setter Property="Width"
            Value="16" />
            <Setter Property="Height"
            Value="16" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Width="16"
                        Height="16"
                        Background="Transparent"
                        Padding="5,5,5,5">
                            <Path x:Name="ExpandPath"
                            Fill="Transparent"
                            Stroke="#FF989898"
                            Data="{StaticResource TreeArrow}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135"
                                                CenterX="3"
                                                CenterY="3" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                                Value="True">
                                <Setter TargetName="ExpandPath"
                                Property="Stroke"
                                Value="#FF1BBBFA" />
                                <Setter TargetName="ExpandPath"
                                Property="Fill"
                                Value="Transparent" />
                            </Trigger>

                            <Trigger Property="IsChecked"
                                Value="True">
                                <Setter TargetName="ExpandPath"
                                Property="RenderTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="180"
                                                    CenterX="3"
                                                    CenterY="3" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="ExpandPath"
                                Property="Fill"
                                Value="#FF595959" />
                                <Setter TargetName="ExpandPath"
                                Property="Stroke"
                                Value="#FF262626" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TreeViewItem Style -->
        <Style x:Key="{x:Type TreeViewItem}"
        TargetType="{x:Type TreeViewItem}">
            <Setter Property="BorderThickness"
            Value="1" />
            <Setter Property="Padding"
            Value="2,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19"
                                            Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="expander"
                                    Style="{StaticResource ExpandCollapseToggleStyle}"
                                    IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press" />
                            <Border x:Name="outerBorder"
                            Grid.Column="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2"
                            SnapsToDevicePixels="true">
                                <Border x:Name="innerBorder"
                                Background="{TemplateBinding Background}"
                                BorderThickness="1"
                                CornerRadius="1"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                                    <ContentPresenter x:Name="PART_Header"
                                                ContentSource="Header"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Border>
                            </Border>
                            <ItemsPresenter x:Name="itemsHost"
                                    Grid.Row="1"
                                    Grid.Column="1"
                                    Grid.ColumnSpan="2" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded"
                                Value="false">
                                <Setter TargetName="itemsHost"
                                Property="Visibility"
                                Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="HasItems"
                                Value="false">
                                <Setter TargetName="expander"
                                Property="Visibility"
                                Value="Hidden" />
                            </Trigger>
                            <Trigger SourceName="outerBorder"
                                Property="IsMouseOver"
                                Value="true">
                                <Setter TargetName="outerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource HoverOuterBorderBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="Background"
                                Value="{StaticResource HoverBackgroundBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource HoverInnerBorderBrushKey}" />
                            </Trigger>
                            <Trigger Property="IsSelected"
                                Value="true">
                                <Setter TargetName="outerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource SelectedActiveOuterBorderBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="Background"
                                Value="{StaticResource SelectedActiveBackgroundBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource SelectedActiveInnerBorderBrushKey}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected"
                                        Value="true" />
                                    <Condition Property="Selector.IsSelectionActive"
                                        Value="false" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="outerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource SelectedInactiveOuterBorderBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="Background"
                                Value="{StaticResource SelectedInactiveBackgroundBrushKey}" />
                                <Setter TargetName="innerBorder"
                                Property="BorderBrush"
                                Value="{StaticResource SelectedInactiveInnerBorderBrushKey}" />
                            </MultiTrigger>
                            <Trigger Property="IsEnabled"
                                Value="false">
                                <Setter Property="Foreground"
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Application.Resources>    
</Application>
